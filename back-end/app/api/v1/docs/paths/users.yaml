/users:
  get:
    tags:
      - Users
    summary: List all users
    description: Retrieve a list of all users. Can be filtered by role and email.
    parameters:
      - in: query
        name: role
        schema:
          type: integer
        description: Filter users by role
      - in: query
        name: email
        schema:
          type: string
        description: Filter users by email (partial match)
    responses:
      200:
        description: List of users
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      500:
        description: Server error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

  post:
    tags:
      - Users
    summary: Create a new user
    description: Create a new user with the provided details
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
              - firstName
              - lastName
              - role
            properties:
              email:
                type: string
                format: email
                description: User's email address
              password:
                type: string
                description: User's password (min 6 characters)
              firstName:
                type: string
                description: User's first name
              lastName:
                type: string
                description: User's last name
              role:
                type: integer
                description: >
                  User role:
                  * 0 - Terminated
                  * 1 - Admin
                  * 2 - Coordinator
                  * 3 - Lecturer
                  * 4 - Student
    responses:
      201:
        description: User created successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      400:
        description: Missing required fields or invalid data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      409:
        description: Email already exists
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      500:
        description: Server error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

/users/{id}:
  get:
    tags:
      - Users
    summary: Get a user by ID
    description: Retrieve a single user by their ID
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: User ID
    responses:
      200:
        description: User found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      404:
        description: User not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      500:
        description: Server error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

  patch:
    tags:
      - Users
    summary: Update a user
    description: Update a user's details
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: User ID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
                description: User's first name
              lastName:
                type: string
                description: User's last name
              role:
                type: integer
                description: >
                  User role:
                  * 0 - Terminated
                  * 1 - Admin
                  * 2 - Coordinator
                  * 3 - Lecturer
                  * 4 - Student
    responses:
      200:
        description: User updated successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      404:
        description: User not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      500:
        description: Server error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

  delete:
    tags:
      - Users
    summary: Delete a user
    description: Delete a user by their ID
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: User ID
    responses:
      204:
        description: User deleted successfully
      404:
        description: User not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      500:
        description: Server error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error' 