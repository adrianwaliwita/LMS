// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  departmentId Int      @map("department_id")
  firebaseUid  String   @unique @map("firebase_uid")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  email        String   @unique
  role         Int
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  department                   Department             @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  studentBatch                 StudentBatch?
  lecturerModules              LecturerModule[]
  createdAssignments           Assignment[]
  studentAssignmentSubmissions AssignmentSubmission[]

  @@map("user")
}

model Department {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  users  User[]
  Course Course[]

  @@map("department")
}

model Module {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  courses     CourseModule[]
  lecturers   LecturerModule[]
  assignments Assignment[]

  @@map("module")
}

model Course {
  id           Int      @id @default(autoincrement())
  departmentId Int      @map("department_id")
  title        String   @unique
  description  String
  category     Int
  level        Int
  price        Float
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  department Department     @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  batches    Batch[]
  modules    CourseModule[]

  @@map("course")
}

// Junction table for Course-Module M:M relationship
model CourseModule {
  courseId  Int      @map("course_id")
  moduleId  Int      @map("module_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([courseId, moduleId])
  @@map("course_module")
}

model Batch {
  id        Int      @id @default(autoincrement())
  courseId  Int      @map("course_id")
  name      String
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  students    StudentBatch[]
  assignments Assignment[]

  @@unique([courseId, name])
  @@map("batch")
}

// Junction table for Student-Batch M:1 relationship
model StudentBatch {
  userId     Int      @unique @map("user_id")
  batchId    Int      @map("batch_id")
  enrolledAt DateTime @default(now()) @map("enrolled_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  batch Batch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@id([userId, batchId])
  @@map("student_batch")
}

// Junction table for Lecturer-Module M:M relationship
model LecturerModule {
  userId    Int      @map("user_id")
  moduleId  Int      @map("module_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([userId, moduleId])
  @@map("lecturer_module")
}

model Assignment {
  id            Int      @id @default(autoincrement())
  batchId       Int      @map("batch_id")
  moduleId      Int      @map("module_id")
  title         String
  description   String
  briefFileName String?  @map("brief_file_name")
  dueDate       DateTime @map("due_date")
  createdBy     Int      @map("created_by")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  batch       Batch                  @relation(fields: [batchId], references: [id], onDelete: Cascade)
  module      Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  creator     User                   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  submissions AssignmentSubmission[]

  @@unique([batchId, moduleId, title])
  @@map("assignment")
}

model AssignmentSubmission {
  id           Int      @id @default(autoincrement())
  assignmentId Int      @map("assignment_id")
  studentId    Int      @map("student_id")
  fileName     String   @map("file_name")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([assignmentId, studentId])
  @@map("assignment_submission")
}

model Classroom {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  capacity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("classroom")
}

model Equipment {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  quantity    Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("equipment")
}
